
week5_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b34  08003b34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b3c  08003b3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000010  08003b50  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003b50  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a64b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188c  00000000  00000000  0002a687  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002bf18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015625  00000000  00000000  0002d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080c4  00000000  00000000  00042be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088b92  00000000  00000000  0004aca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d383b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000313c  00000000  00000000  000d38b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003afc 	.word	0x08003afc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003afc 	.word	0x08003afc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc74 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f844 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9b2 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f990 	bl	8000810 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f964 	bl	80007bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f4:	f000 f8a4 	bl	8000640 <MX_TIM2_Init>
  MX_TIM5_Init();
 80004f8:	f000 f912 	bl	8000720 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  	//start Microsec timer
	HAL_TIM_Base_Start_IT(&htim5);
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x84>)
 80004fe:	f001 ffbe 	bl	800247e <HAL_TIM_Base_Start_IT>
	//start Input capture in DMA
	HAL_TIM_Base_Start(&htim2);
 8000502:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x88>)
 8000504:	f001 ff97 	bl	8002436 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)capturedata,CAPTURENUM);
 8000508:	2320      	movs	r3, #32
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <main+0x8c>)
 800050c:	2100      	movs	r1, #0
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <main+0x88>)
 8000510:	f002 f80e 	bl	8002530 <HAL_TIM_IC_Start_DMA>
	uint64_t timestamp =0;
 8000514:	f04f 0300 	mov.w	r3, #0
 8000518:	f04f 0400 	mov.w	r4, #0
 800051c:	e9c7 3400 	strd	r3, r4, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//read Time of encoder
		encoderSpeedReaderCycle();
 8000520:	f000 fa06 	bl	8000930 <encoderSpeedReaderCycle>

		if(micros()-timestamp > 100000) //us
 8000524:	f000 fa7e 	bl	8000a24 <micros>
 8000528:	460a      	mov	r2, r1
 800052a:	4601      	mov	r1, r0
 800052c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	eb62 0204 	sbc.w	r2, r2, r4
 8000536:	468b      	mov	fp, r1
 8000538:	4694      	mov	ip, r2
 800053a:	490b      	ldr	r1, [pc, #44]	; (8000568 <main+0x90>)
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	4562      	cmp	r2, ip
 8000542:	bf08      	it	eq
 8000544:	4559      	cmpeq	r1, fp
 8000546:	d2eb      	bcs.n	8000520 <main+0x48>
		{
			timestamp = micros();
 8000548:	f000 fa6c 	bl	8000a24 <micros>
 800054c:	e9c7 0100 	strd	r0, r1, [r7]
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000550:	2120      	movs	r1, #32
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <main+0x94>)
 8000554:	f001 fac7 	bl	8001ae6 <HAL_GPIO_TogglePin>
		encoderSpeedReaderCycle();
 8000558:	e7e2      	b.n	8000520 <main+0x48>
 800055a:	bf00      	nop
 800055c:	20000198 	.word	0x20000198
 8000560:	200001d8 	.word	0x200001d8
 8000564:	2000002c 	.word	0x2000002c
 8000568:	000186a0 	.word	0x000186a0
 800056c:	40020000 	.word	0x40020000

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fab4 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <SystemClock_Config+0xc8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <SystemClock_Config+0xcc>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fa91 	bl	8001b1c <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 fa46 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fceb 	bl	8001ffc <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800062c:	f000 fa30 	bl	8000a90 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_TIM2_Init+0xdc>)
 800066c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_TIM2_Init+0xdc>)
 8000674:	2263      	movs	r2, #99	; 0x63
 8000676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <MX_TIM2_Init+0xdc>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <MX_TIM2_Init+0xdc>)
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <MX_TIM2_Init+0xdc>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_TIM2_Init+0xdc>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_TIM2_Init+0xdc>)
 8000694:	f001 fea4 	bl	80023e0 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800069e:	f000 f9f7 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	4619      	mov	r1, r3
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <MX_TIM2_Init+0xdc>)
 80006b0:	f002 f9d8 	bl	8002a64 <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006ba:	f000 f9e9 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006be:	4817      	ldr	r0, [pc, #92]	; (800071c <MX_TIM2_Init+0xdc>)
 80006c0:	f001 ff01 	bl	80024c6 <HAL_TIM_IC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f9e1 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <MX_TIM2_Init+0xdc>)
 80006de:	f002 fd95 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80006e8:	f000 f9d2 	bl	8000a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_TIM2_Init+0xdc>)
 8000704:	f002 f912 	bl	800292c <HAL_TIM_IC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800070e:	f000 f9bf 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001d8 	.word	0x200001d8

08000720 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_TIM5_Init+0x94>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_TIM5_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM5_Init+0x94>)
 8000744:	2263      	movs	r2, #99	; 0x63
 8000746:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM5_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_TIM5_Init+0x94>)
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_TIM5_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM5_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_TIM5_Init+0x94>)
 8000764:	f001 fe3c 	bl	80023e0 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f98f 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_TIM5_Init+0x94>)
 8000780:	f002 f970 	bl	8002a64 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f981 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_TIM5_Init+0x94>)
 800079c:	f002 fd36 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80007a6:	f000 f973 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000198 	.word	0x20000198
 80007b8:	40000c00 	.word	0x40000c00

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f002 fd8c 	bl	8003310 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f947 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000218 	.word	0x20000218
 800080c:	40004400 	.word	0x40004400

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA_Init+0x3c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <MX_DMA_Init+0x3c>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2010      	movs	r0, #16
 8000838:	f000 fc15 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800083c:	2010      	movs	r0, #16
 800083e:	f000 fc2e 	bl	800109e <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <MX_GPIO_Init+0xd0>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008dc:	f001 f8ea 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_GPIO_Init+0xd8>)
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_GPIO_Init+0xdc>)
 80008f6:	f000 ff5b 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008fa:	2320      	movs	r3, #32
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000912:	f000 ff4d 	bl	80017b0 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	10210000 	.word	0x10210000
 800092c:	40020800 	.word	0x40020800

08000930 <encoderSpeedReaderCycle>:

/* USER CODE BEGIN 4 */
void encoderSpeedReaderCycle() {
 8000930:	b490      	push	{r4, r7}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	//get DMA Position form number of data
	uint32_t CapPos = CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <encoderSpeedReaderCycle+0xd8>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1c3 0320 	rsb	r3, r3, #32
 8000942:	603b      	str	r3, [r7, #0]
	uint32_t sum = 0 ;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]

	//calculate diff from all buffer
	for(register int i=0 ;i < CAPTURENUM-1;i++)
 8000948:	2400      	movs	r4, #0
 800094a:	e02b      	b.n	80009a4 <encoderSpeedReaderCycle+0x74>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 800094c:	4622      	mov	r2, r4
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	3301      	adds	r3, #1
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <encoderSpeedReaderCycle+0xdc>)
 800095a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800095e:	4621      	mov	r1, r4
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	440b      	add	r3, r1
 8000964:	f003 031f 	and.w	r3, r3, #31
 8000968:	4928      	ldr	r1, [pc, #160]	; (8000a0c <encoderSpeedReaderCycle+0xdc>)
 800096a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <encoderSpeedReaderCycle+0xe0>)
 8000974:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		//time never go back, but timer can over flow , conpensate that
		if (DiffTime[i] <0)
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <encoderSpeedReaderCycle+0xe0>)
 800097a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da08      	bge.n	8000994 <encoderSpeedReaderCycle+0x64>
		{
			DiffTime[i]+=65535;
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <encoderSpeedReaderCycle+0xe0>)
 8000984:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800098c:	33ff      	adds	r3, #255	; 0xff
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <encoderSpeedReaderCycle+0xe0>)
 8000990:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		}
		//Sum all 15 Diff
		sum += DiffTime[i];
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <encoderSpeedReaderCycle+0xe0>)
 8000996:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	607b      	str	r3, [r7, #4]
	for(register int i=0 ;i < CAPTURENUM-1;i++)
 80009a2:	3401      	adds	r4, #1
 80009a4:	2c1e      	cmp	r4, #30
 80009a6:	ddd1      	ble.n	800094c <encoderSpeedReaderCycle+0x1c>
	}

	//mean all 15 Diff
	MeanTime =sum / (float)(CAPTURENUM-1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009b2:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80009b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <encoderSpeedReaderCycle+0xe4>)
 80009bc:	edc3 7a00 	vstr	s15, [r3]
	if(MeanTime == 0)
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <encoderSpeedReaderCycle+0xe4>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	d104      	bne.n	80009da <encoderSpeedReaderCycle+0xaa>
	{
		rpm = 0;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <encoderSpeedReaderCycle+0xe8>)
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		rpm = (60*1000000)/ (float)(MeanTime*12*64);
	}
}
 80009d8:	e011      	b.n	80009fe <encoderSpeedReaderCycle+0xce>
		rpm = (60*1000000)/ (float)(MeanTime*12*64);
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <encoderSpeedReaderCycle+0xe4>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80009e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a1c <encoderSpeedReaderCycle+0xec>
 80009ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009f0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000a20 <encoderSpeedReaderCycle+0xf0>
 80009f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <encoderSpeedReaderCycle+0xe8>)
 80009fa:	edc3 7a00 	vstr	s15, [r3]
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc90      	pop	{r4, r7}
 8000a06:	4770      	bx	lr
 8000a08:	200001d8 	.word	0x200001d8
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	20000128 	.word	0x20000128
 8000a18:	2000012c 	.word	0x2000012c
 8000a1c:	42800000 	.word	0x42800000
 8000a20:	4c64e1c0 	.word	0x4c64e1c0

08000a24 <micros>:
uint64_t micros()
{
 8000a24:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000a28:	af00      	add	r7, sp, #0
	return _micros + htim5.Instance->CNT;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <micros+0x2c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <micros+0x30>)
 8000a38:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000a3c:	eb1b 0301 	adds.w	r3, fp, r1
 8000a40:	eb4c 0402 	adc.w	r4, ip, r2
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	4621      	mov	r1, r4
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000a4e:	4770      	bx	lr
 8000a50:	20000198 	.word	0x20000198
 8000a54:	20000130 	.word	0x20000130

08000a58 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b490      	push	{r4, r7}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 if(htim == &htim5)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d109      	bne.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x24>
 {
	 _micros += 4294967295;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a6a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000a6e:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000a72:	f142 0400 	adc.w	r4, r2, #0
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a78:	e9c2 3400 	strd	r3, r4, [r2]
 }
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc90      	pop	{r4, r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000198 	.word	0x20000198
 8000a8c:	20000130 	.word	0x20000130

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a96:	e7fe      	b.n	8000a96 <Error_Handler+0x6>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 faba 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b08:	d166      	bne.n	8000bd8 <HAL_TIM_Base_MspInit+0xf0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a41      	ldr	r2, [pc, #260]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b54:	2301      	movs	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	482f      	ldr	r0, [pc, #188]	; (8000c1c <HAL_TIM_Base_MspInit+0x134>)
 8000b60:	f000 fe26 	bl	80017b0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b66:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <HAL_TIM_Base_MspInit+0x13c>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b70:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b84:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b8c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b94:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000baa:	481d      	ldr	r0, [pc, #116]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000bac:	f000 fa92 	bl	80010d4 <HAL_DMA_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8000bb6:	f7ff ff6b 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_TIM_Base_MspInit+0x138>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	201c      	movs	r0, #28
 8000bcc:	f000 fa4b 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd0:	201c      	movs	r0, #28
 8000bd2:	f000 fa64 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000bd6:	e01a      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <HAL_TIM_Base_MspInit+0x140>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d115      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x130>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2032      	movs	r0, #50	; 0x32
 8000c04:	f000 fa2f 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c08:	2032      	movs	r0, #50	; 0x32
 8000c0a:	f000 fa48 	bl	800109e <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	20000138 	.word	0x20000138
 8000c24:	40026088 	.word	0x40026088
 8000c28:	40000c00 	.word	0x40000c00

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c86:	230c      	movs	r3, #12
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_UART_MspInit+0x8c>)
 8000ca2:	f000 fd85 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8b2 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA1_Stream5_IRQHandler+0x10>)
 8000d16:	f000 fae3 	bl	80012e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000138 	.word	0x20000138

08000d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM2_IRQHandler+0x10>)
 8000d2a:	f001 fcf7 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200001d8 	.word	0x200001d8

08000d38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM5_IRQHandler+0x10>)
 8000d3e:	f001 fced 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000198 	.word	0x20000198

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemInit+0x28>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <SystemInit+0x28>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SystemInit+0x28>)
 8000d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d66:	609a      	str	r2, [r3, #8]
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7e:	e003      	b.n	8000d88 <LoopCopyDataInit>

08000d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d86:	3104      	adds	r1, #4

08000d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d90:	d3f6      	bcc.n	8000d80 <CopyDataInit>
  ldr  r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d94:	e002      	b.n	8000d9c <LoopFillZerobss>

08000d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d98:	f842 3b04 	str.w	r3, [r2], #4

08000d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da0:	d3f9      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd3 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 fe7d 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fb95 	bl	80004d8 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000db4:	08003b44 	.word	0x08003b44
  ldr  r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dbc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000dc0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000dc4:	2000025c 	.word	0x2000025c

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f92b 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe4a 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f943 	bl	80010ba <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f90b 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000258 	.word	0x20000258

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000258 	.word	0x20000258

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff feda 	bl	8000e98 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e099      	b.n	8001224 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001110:	e00f      	b.n	8001132 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001112:	f7ff fec1 	bl	8000e98 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	d908      	bls.n	8001132 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e078      	b.n	8001224 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e8      	bne.n	8001112 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <HAL_DMA_Init+0x158>)
 800114c:	4013      	ands	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	2b04      	cmp	r3, #4
 800118a:	d107      	bne.n	800119c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4313      	orrs	r3, r2
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f023 0307 	bic.w	r3, r3, #7
 80011b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d117      	bne.n	80011f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00e      	beq.n	80011f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fa6f 	bl	80016bc <DMA_CheckFifoParam>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011f2:	2301      	movs	r3, #1
 80011f4:	e016      	b.n	8001224 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fa26 	bl	8001650 <DMA_CalcBaseAndBitshift>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120c:	223f      	movs	r2, #63	; 0x3f
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	f010803f 	.word	0xf010803f

08001230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_DMA_Start_IT+0x26>
 8001252:	2302      	movs	r3, #2
 8001254:	e040      	b.n	80012d8 <HAL_DMA_Start_IT+0xa8>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12f      	bne.n	80012ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f9b8 	bl	80015f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001288:	223f      	movs	r2, #63	; 0x3f
 800128a:	409a      	lsls	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0216 	orr.w	r2, r2, #22
 800129e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0208 	orr.w	r2, r2, #8
 80012b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e005      	b.n	80012d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
 80012d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_DMA_IRQHandler+0x258>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a92      	ldr	r2, [pc, #584]	; (800153c <HAL_DMA_IRQHandler+0x25c>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0a9b      	lsrs	r3, r3, #10
 80012f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130a:	2208      	movs	r2, #8
 800130c:	409a      	lsls	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01a      	beq.n	800134c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0204 	bic.w	r2, r2, #4
 8001332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	2208      	movs	r2, #8
 800133a:	409a      	lsls	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	2201      	movs	r2, #1
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d012      	beq.n	8001382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	2201      	movs	r2, #1
 8001370:	409a      	lsls	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f043 0202 	orr.w	r2, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	2204      	movs	r2, #4
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d012      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	2204      	movs	r2, #4
 80013a6:	409a      	lsls	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	f043 0204 	orr.w	r2, r3, #4
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	2210      	movs	r2, #16
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d043      	beq.n	8001450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d03c      	beq.n	8001450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2210      	movs	r2, #16
 80013dc:	409a      	lsls	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d018      	beq.n	8001422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d108      	bne.n	8001410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d024      	beq.n	8001450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
 800140e:	e01f      	b.n	8001450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
 8001420:	e016      	b.n	8001450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2220      	movs	r2, #32
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 808e 	beq.w	800157e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8086 	beq.w	800157e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2220      	movs	r2, #32
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b05      	cmp	r3, #5
 8001488:	d136      	bne.n	80014f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0216 	bic.w	r2, r2, #22
 8001498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <HAL_DMA_IRQHandler+0x1da>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0208 	bic.w	r2, r2, #8
 80014c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	223f      	movs	r2, #63	; 0x3f
 80014d0:	409a      	lsls	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d07d      	beq.n	80015ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
        }
        return;
 80014f6:	e078      	b.n	80015ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01c      	beq.n	8001540 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	2b00      	cmp	r3, #0
 800151a:	d030      	beq.n	800157e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
 8001524:	e02b      	b.n	800157e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d027      	beq.n	800157e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
 8001536:	e022      	b.n	800157e <HAL_DMA_IRQHandler+0x29e>
 8001538:	20000000 	.word	0x20000000
 800153c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10f      	bne.n	800156e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0210 	bic.w	r2, r2, #16
 800155c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	2b00      	cmp	r3, #0
 8001584:	d032      	beq.n	80015ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d307      	bcc.n	80015c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f2      	bne.n	80015aa <HAL_DMA_IRQHandler+0x2ca>
 80015c4:	e000      	b.n	80015c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4798      	blx	r3
 80015e8:	e000      	b.n	80015ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80015ea:	bf00      	nop
    }
  }
}
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop

080015f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b40      	cmp	r3, #64	; 0x40
 8001620:	d108      	bne.n	8001634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001632:	e007      	b.n	8001644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3b10      	subs	r3, #16
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <DMA_CalcBaseAndBitshift+0x68>)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d909      	bls.n	8001692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	1d1a      	adds	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
 8001690:	e007      	b.n	80016a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	aaaaaaab 	.word	0xaaaaaaab
 80016b8:	08003b2c 	.word	0x08003b2c

080016bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11f      	bne.n	8001716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d855      	bhi.n	8001788 <DMA_CheckFifoParam+0xcc>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <DMA_CheckFifoParam+0x28>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	08001707 	.word	0x08001707
 80016ec:	080016f5 	.word	0x080016f5
 80016f0:	08001789 	.word	0x08001789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d045      	beq.n	800178c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001704:	e042      	b.n	800178c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800170e:	d13f      	bne.n	8001790 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001714:	e03c      	b.n	8001790 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171e:	d121      	bne.n	8001764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d836      	bhi.n	8001794 <DMA_CheckFifoParam+0xd8>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <DMA_CheckFifoParam+0x70>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	08001743 	.word	0x08001743
 8001734:	0800173d 	.word	0x0800173d
 8001738:	08001755 	.word	0x08001755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
      break;
 8001740:	e02f      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d024      	beq.n	8001798 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001752:	e021      	b.n	8001798 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800175c:	d11e      	bne.n	800179c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001762:	e01b      	b.n	800179c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d902      	bls.n	8001770 <DMA_CheckFifoParam+0xb4>
 800176a:	2b03      	cmp	r3, #3
 800176c:	d003      	beq.n	8001776 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800176e:	e018      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
      break;
 8001774:	e015      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
      break;
 8001786:	e00b      	b.n	80017a0 <DMA_CheckFifoParam+0xe4>
      break;
 8001788:	bf00      	nop
 800178a:	e00a      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 800178c:	bf00      	nop
 800178e:	e008      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001790:	bf00      	nop
 8001792:	e006      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001794:	bf00      	nop
 8001796:	e004      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001798:	bf00      	nop
 800179a:	e002      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800179c:	bf00      	nop
 800179e:	e000      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 80017a0:	bf00      	nop
    }
  } 
  
  return status; 
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d00b      	beq.n	800180a <HAL_GPIO_Init+0x5a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fe:	2b11      	cmp	r3, #17
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b12      	cmp	r3, #18
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0xfc>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <HAL_GPIO_Init+0x2f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x2f8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_GPIO_Init+0x2fc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f6:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	619a      	str	r2, [r3, #24]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	401a      	ands	r2, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d104      	bne.n	8001b0a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e25b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d075      	beq.n	8001c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3a:	4ba3      	ldr	r3, [pc, #652]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4ba0      	ldr	r3, [pc, #640]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b99      	ldr	r3, [pc, #612]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x108>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e236      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x74>
 8001b82:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a90      	ldr	r2, [pc, #576]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a8a      	ldr	r2, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a83      	ldr	r2, [pc, #524]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a80      	ldr	r2, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f960 	bl	8000e98 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f95c 	bl	8000e98 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1fb      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xc0>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f94c 	bl	8000e98 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f948 	bl	8000e98 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1e7      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0xe8>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1bb      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4952      	ldr	r1, [pc, #328]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_RCC_OscConfig+0x2b0>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f901 	bl	8000e98 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f8fd 	bl	8000e98 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e19c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4940      	ldr	r1, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_RCC_OscConfig+0x2b0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f8e0 	bl	8000e98 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f8dc 	bl	8000e98 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e17b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d030      	beq.n	8001d68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_OscConfig+0x2b4>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f8c0 	bl	8000e98 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f8bc 	bl	8000e98 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e15b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x200>
 8001d3a:	e015      	b.n	8001d68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x2b4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f8a9 	bl	8000e98 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f8a5 	bl	8000e98 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e144      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a0 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x2b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d121      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_RCC_OscConfig+0x2b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_RCC_OscConfig+0x2b8>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f86b 	bl	8000e98 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e011      	b.n	8001dea <HAL_RCC_OscConfig+0x2ce>
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470000 	.word	0x42470000
 8001dd0:	42470e80 	.word	0x42470e80
 8001dd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd8:	f7ff f85e 	bl	8000e98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0fd      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x4d4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d106      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	e01c      	b.n	8001e46 <HAL_RCC_OscConfig+0x32a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x312>
 8001e14:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a76      	ldr	r2, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a73      	ldr	r2, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCC_OscConfig+0x32a>
 8001e2e:	4b71      	ldr	r3, [pc, #452]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a70      	ldr	r2, [pc, #448]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a6d      	ldr	r2, [pc, #436]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f823 	bl	8000e98 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f81f 	bl	8000e98 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0bc      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCC_OscConfig+0x33a>
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f80d 	bl	8000e98 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff f809 	bl	8000e98 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0a6      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8092 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d05c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d141      	bne.n	8001f58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x4dc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe ffdd 	bl	8000e98 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe ffd9 	bl	8000e98 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e078      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	019b      	lsls	r3, r3, #6
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	4933      	ldr	r1, [pc, #204]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_RCC_OscConfig+0x4dc>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe ffb2 	bl	8000e98 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe ffae 	bl	8000e98 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e04d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x41c>
 8001f56:	e045      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4dc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe ff9b 	bl	8000e98 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe ff97 	bl	8000e98 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e036      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x44a>
 8001f84:	e02e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e029      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_RCC_OscConfig+0x4d8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d115      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fba:	4013      	ands	r3, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	42470060 	.word	0x42470060

08001ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0cc      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d90c      	bls.n	8002038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d044      	beq.n	800211c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d119      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e067      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4934      	ldr	r1, [pc, #208]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fed4 	bl	8000e98 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7fe fed0 	bl	8000e98 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 020c 	and.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d1eb      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d20c      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	fa21 f303 	lsr.w	r3, r1, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fe34 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	08003b14 	.word	0x08003b14
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	2300      	movs	r3, #0
 80021d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d007      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x32>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d008      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x38>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80b4 	bne.w	800235c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021f6:	60bb      	str	r3, [r7, #8]
       break;
 80021f8:	e0b3      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fa:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021fc:	60bb      	str	r3, [r7, #8]
      break;
 80021fe:	e0b0      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220a:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d04a      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b55      	ldr	r3, [pc, #340]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	ea03 0501 	and.w	r5, r3, r1
 800222c:	ea04 0602 	and.w	r6, r4, r2
 8002230:	4629      	mov	r1, r5
 8002232:	4632      	mov	r2, r6
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	0154      	lsls	r4, r2, #5
 800223e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002242:	014b      	lsls	r3, r1, #5
 8002244:	4619      	mov	r1, r3
 8002246:	4622      	mov	r2, r4
 8002248:	1b49      	subs	r1, r1, r5
 800224a:	eb62 0206 	sbc.w	r2, r2, r6
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	0194      	lsls	r4, r2, #6
 8002258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800225c:	018b      	lsls	r3, r1, #6
 800225e:	1a5b      	subs	r3, r3, r1
 8002260:	eb64 0402 	sbc.w	r4, r4, r2
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	00e2      	lsls	r2, r4, #3
 800226e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002272:	00d9      	lsls	r1, r3, #3
 8002274:	460b      	mov	r3, r1
 8002276:	4614      	mov	r4, r2
 8002278:	195b      	adds	r3, r3, r5
 800227a:	eb44 0406 	adc.w	r4, r4, r6
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	0262      	lsls	r2, r4, #9
 8002288:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800228c:	0259      	lsls	r1, r3, #9
 800228e:	460b      	mov	r3, r1
 8002290:	4614      	mov	r4, r2
 8002292:	4618      	mov	r0, r3
 8002294:	4621      	mov	r1, r4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f04f 0400 	mov.w	r4, #0
 800229c:	461a      	mov	r2, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	f7fd ff9a 	bl	80001d8 <__aeabi_uldivmod>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e049      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	f04f 0400 	mov.w	r4, #0
 80022b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	ea03 0501 	and.w	r5, r3, r1
 80022c2:	ea04 0602 	and.w	r6, r4, r2
 80022c6:	4629      	mov	r1, r5
 80022c8:	4632      	mov	r2, r6
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	f04f 0400 	mov.w	r4, #0
 80022d2:	0154      	lsls	r4, r2, #5
 80022d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022d8:	014b      	lsls	r3, r1, #5
 80022da:	4619      	mov	r1, r3
 80022dc:	4622      	mov	r2, r4
 80022de:	1b49      	subs	r1, r1, r5
 80022e0:	eb62 0206 	sbc.w	r2, r2, r6
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f04f 0400 	mov.w	r4, #0
 80022ec:	0194      	lsls	r4, r2, #6
 80022ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022f2:	018b      	lsls	r3, r1, #6
 80022f4:	1a5b      	subs	r3, r3, r1
 80022f6:	eb64 0402 	sbc.w	r4, r4, r2
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002308:	00d9      	lsls	r1, r3, #3
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	195b      	adds	r3, r3, r5
 8002310:	eb44 0406 	adc.w	r4, r4, r6
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	02a2      	lsls	r2, r4, #10
 800231e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002322:	0299      	lsls	r1, r3, #10
 8002324:	460b      	mov	r3, r1
 8002326:	4614      	mov	r4, r2
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	461a      	mov	r2, r3
 8002334:	4623      	mov	r3, r4
 8002336:	f7fd ff4f 	bl	80001d8 <__aeabi_uldivmod>
 800233a:	4603      	mov	r3, r0
 800233c:	460c      	mov	r4, r1
 800233e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	3301      	adds	r3, #1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	60bb      	str	r3, [r7, #8]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800235e:	60bb      	str	r3, [r7, #8]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	68bb      	ldr	r3, [r7, #8]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	00f42400 	.word	0x00f42400
 8002374:	007a1200 	.word	0x007a1200

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4601      	mov	r1, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a9b      	lsrs	r3, r3, #10
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08003b24 	.word	0x08003b24

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffdc 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08003b24 	.word	0x08003b24

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01d      	b.n	800242e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fb6e 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 fc96 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d007      	beq.n	8002468 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d007      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01d      	b.n	8002514 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f815 	bl	800251c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 fc23 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d101      	bne.n	800254e <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	e0dc      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10b      	bne.n	8002572 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_TIM_IC_Start_DMA+0x3a>
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0ce      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	f200 80ad 	bhi.w	80026d4 <HAL_TIM_IC_Start_DMA+0x1a4>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_TIM_IC_Start_DMA+0x50>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080026d5 	.word	0x080026d5
 8002588:	080026d5 	.word	0x080026d5
 800258c:	080026d5 	.word	0x080026d5
 8002590:	080025fd 	.word	0x080025fd
 8002594:	080026d5 	.word	0x080026d5
 8002598:	080026d5 	.word	0x080026d5
 800259c:	080026d5 	.word	0x080026d5
 80025a0:	08002645 	.word	0x08002645
 80025a4:	080026d5 	.word	0x080026d5
 80025a8:	080026d5 	.word	0x080026d5
 80025ac:	080026d5 	.word	0x080026d5
 80025b0:	0800268d 	.word	0x0800268d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_TIM_IC_Start_DMA+0x1e0>)
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_TIM_IC_Start_DMA+0x1e4>)
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	4a53      	ldr	r2, [pc, #332]	; (8002718 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80025ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3334      	adds	r3, #52	; 0x34
 80025d6:	4619      	mov	r1, r3
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	f7fe fe28 	bl	8001230 <HAL_DMA_Start_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e08e      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	60da      	str	r2, [r3, #12]
      break;
 80025fa:	e06c      	b.n	80026d6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	4a43      	ldr	r2, [pc, #268]	; (8002710 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	4a41      	ldr	r2, [pc, #260]	; (8002718 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002612:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3338      	adds	r3, #56	; 0x38
 800261e:	4619      	mov	r1, r3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	f7fe fe04 	bl	8001230 <HAL_DMA_Start_IT>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06a      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002640:	60da      	str	r2, [r3, #12]
      break;
 8002642:	e048      	b.n	80026d6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	4a31      	ldr	r2, [pc, #196]	; (8002710 <HAL_TIM_IC_Start_DMA+0x1e0>)
 800264a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800265a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	333c      	adds	r3, #60	; 0x3c
 8002666:	4619      	mov	r1, r3
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	f7fe fde0 	bl	8001230 <HAL_DMA_Start_IT>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e046      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002688:	60da      	str	r2, [r3, #12]
      break;
 800268a:	e024      	b.n	80026d6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80026a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3340      	adds	r3, #64	; 0x40
 80026ae:	4619      	mov	r1, r3
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	f7fe fdbc 	bl	8001230 <HAL_DMA_Start_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026d0:	60da      	str	r2, [r3, #12]
      break;
 80026d2:	e000      	b.n	80026d6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 80026d4:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fd6e 	bl	80031c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d007      	beq.n	8002706 <HAL_TIM_IC_Start_DMA+0x1d6>
  {
    __HAL_TIM_ENABLE(htim);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	08002c6f 	.word	0x08002c6f
 8002714:	08002cdf 	.word	0x08002cdf
 8002718:	08002c4b 	.word	0x08002c4b

0800271c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0202 	mvn.w	r2, #2
 8002748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa41 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa33 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fa4e 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0204 	mvn.w	r2, #4
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa17 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa09 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fa24 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0208 	mvn.w	r2, #8
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2204      	movs	r2, #4
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f9ed 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9df 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f9fa 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b10      	cmp	r3, #16
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b10      	cmp	r3, #16
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0210 	mvn.w	r2, #16
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2208      	movs	r2, #8
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9c3 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9b5 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9d0 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f8dc 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fd18 	bl	80032fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f995 	bl	8002c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b20      	cmp	r3, #32
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0220 	mvn.w	r2, #32
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fce2 	bl	80032e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e08a      	b.n	8002a5c <HAL_TIM_IC_ConfigChannel+0x130>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f000 fa70 	bl	8002e50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 020c 	bic.w	r2, r2, #12
 800297e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	619a      	str	r2, [r3, #24]
 8002992:	e05a      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d11c      	bne.n	80029d4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f000 fae8 	bl	8002f7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6999      	ldr	r1, [r3, #24]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
 80029d2:	e03a      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11b      	bne.n	8002a12 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f000 fb35 	bl	8003058 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 020c 	bic.w	r2, r2, #12
 80029fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69d9      	ldr	r1, [r3, #28]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
 8002a10:	e01b      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f000 fb55 	bl	80030d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_TIM_ConfigClockSource+0x18>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0a6      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x166>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d067      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x120>
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d80b      	bhi.n	8002ad0 <HAL_TIM_ConfigClockSource+0x6c>
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d073      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x140>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d802      	bhi.n	8002ac6 <HAL_TIM_ConfigClockSource+0x62>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d06f      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ac4:	e078      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d06c      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x140>
 8002aca:	2b30      	cmp	r3, #48	; 0x30
 8002acc:	d06a      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ace:	e073      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ad0:	2b70      	cmp	r3, #112	; 0x70
 8002ad2:	d00d      	beq.n	8002af0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d804      	bhi.n	8002ae2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ad8:	2b50      	cmp	r3, #80	; 0x50
 8002ada:	d033      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xe0>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d041      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ae0:	e06a      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae6:	d066      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x152>
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aec:	d017      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002aee:	e063      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f000 fb3e 	bl	8003180 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e04c      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f000 fb27 	bl	8003180 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b40:	609a      	str	r2, [r3, #8]
      break;
 8002b42:	e039      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 f9e5 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2150      	movs	r1, #80	; 0x50
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 faf4 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002b62:	e029      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f000 fa41 	bl	8002ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2160      	movs	r1, #96	; 0x60
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fae4 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002b82:	e019      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f000 f9c5 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2140      	movs	r1, #64	; 0x40
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fad4 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002ba2:	e009      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 facb 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e000      	b.n	8002bb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff ffe8 	bl	8002c36 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d103      	bne.n	8002c96 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	771a      	strb	r2, [r3, #28]
 8002c94:	e019      	b.n	8002cca <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d103      	bne.n	8002ca8 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	771a      	strb	r2, [r3, #28]
 8002ca6:	e010      	b.n	8002cca <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d103      	bne.n	8002cba <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	771a      	strb	r2, [r3, #28]
 8002cb8:	e007      	b.n	8002cca <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d102      	bne.n	8002cca <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff ff8b 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	771a      	strb	r2, [r3, #28]
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d103      	bne.n	8002d06 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]
 8002d04:	e019      	b.n	8002d3a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d103      	bne.n	8002d18 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2202      	movs	r2, #2
 8002d14:	771a      	strb	r2, [r3, #28]
 8002d16:	e010      	b.n	8002d3a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d103      	bne.n	8002d2a <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2204      	movs	r2, #4
 8002d26:	771a      	strb	r2, [r3, #28]
 8002d28:	e007      	b.n	8002d3a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d102      	bne.n	8002d3a <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2208      	movs	r2, #8
 8002d38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ff5d 	bl	8002bfa <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	771a      	strb	r2, [r3, #28]
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00f      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <TIM_Base_SetConfig+0xe8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <TIM_Base_SetConfig+0xec>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <TIM_Base_SetConfig+0xf0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <TIM_Base_SetConfig+0xe8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <TIM_Base_SetConfig+0xec>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <TIM_Base_SetConfig+0xf0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <TIM_Base_SetConfig+0xf4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <TIM_Base_SetConfig+0xf8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <TIM_Base_SetConfig+0xfc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40014000 	.word	0x40014000
 8002e48:	40014400 	.word	0x40014400
 8002e4c:	40014800 	.word	0x40014800

08002e50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <TIM_TI1_SetConfig+0xbc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_TI1_SetConfig+0x56>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d00f      	beq.n	8002ea6 <TIM_TI1_SetConfig+0x56>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <TIM_TI1_SetConfig+0xc0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_TI1_SetConfig+0x56>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <TIM_TI1_SetConfig+0xc4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_TI1_SetConfig+0x56>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <TIM_TI1_SetConfig+0xc8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_TI1_SetConfig+0x56>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <TIM_TI1_SetConfig+0xcc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <TIM_TI1_SetConfig+0x5a>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <TIM_TI1_SetConfig+0x5c>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e003      	b.n	8002eca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f023 030a 	bic.w	r3, r3, #10
 8002ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 030a 	and.w	r3, r3, #10
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00
 8002f1c:	40014000 	.word	0x40014000

08002f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0201 	bic.w	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0210 	bic.w	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	031b      	lsls	r3, r3, #12
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 0210 	bic.w	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 0303 	bic.w	r3, r3, #3
 8003084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003094:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	b2db      	uxtb	r3, r3
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80030a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	031b      	lsls	r3, r3, #12
 8003114:	b29b      	uxth	r3, r3
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 0307 	orr.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2201      	movs	r2, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1a      	ldr	r2, [r3, #32]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e050      	b.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d013      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10c      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40014000 	.word	0x40014000

080032e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e03f      	b.n	80033a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fc78 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f829 	bl	80033ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033ee:	f023 030c 	bic.w	r3, r3, #12
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	f040 818b 	bne.w	8003734 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4ac1      	ldr	r2, [pc, #772]	; (8003728 <UART_SetConfig+0x37c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d005      	beq.n	8003434 <UART_SetConfig+0x88>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4abf      	ldr	r2, [pc, #764]	; (800372c <UART_SetConfig+0x380>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f040 80bd 	bne.w	80035ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe ffc0 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8003438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	461d      	mov	r5, r3
 800343e:	f04f 0600 	mov.w	r6, #0
 8003442:	46a8      	mov	r8, r5
 8003444:	46b1      	mov	r9, r6
 8003446:	eb18 0308 	adds.w	r3, r8, r8
 800344a:	eb49 0409 	adc.w	r4, r9, r9
 800344e:	4698      	mov	r8, r3
 8003450:	46a1      	mov	r9, r4
 8003452:	eb18 0805 	adds.w	r8, r8, r5
 8003456:	eb49 0906 	adc.w	r9, r9, r6
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800346a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800346e:	4688      	mov	r8, r1
 8003470:	4691      	mov	r9, r2
 8003472:	eb18 0005 	adds.w	r0, r8, r5
 8003476:	eb49 0106 	adc.w	r1, r9, r6
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	461d      	mov	r5, r3
 8003480:	f04f 0600 	mov.w	r6, #0
 8003484:	196b      	adds	r3, r5, r5
 8003486:	eb46 0406 	adc.w	r4, r6, r6
 800348a:	461a      	mov	r2, r3
 800348c:	4623      	mov	r3, r4
 800348e:	f7fc fea3 	bl	80001d8 <__aeabi_uldivmod>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	461a      	mov	r2, r3
 8003498:	4ba5      	ldr	r3, [pc, #660]	; (8003730 <UART_SetConfig+0x384>)
 800349a:	fba3 2302 	umull	r2, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	461d      	mov	r5, r3
 80034a8:	f04f 0600 	mov.w	r6, #0
 80034ac:	46a9      	mov	r9, r5
 80034ae:	46b2      	mov	sl, r6
 80034b0:	eb19 0309 	adds.w	r3, r9, r9
 80034b4:	eb4a 040a 	adc.w	r4, sl, sl
 80034b8:	4699      	mov	r9, r3
 80034ba:	46a2      	mov	sl, r4
 80034bc:	eb19 0905 	adds.w	r9, r9, r5
 80034c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034d8:	4689      	mov	r9, r1
 80034da:	4692      	mov	sl, r2
 80034dc:	eb19 0005 	adds.w	r0, r9, r5
 80034e0:	eb4a 0106 	adc.w	r1, sl, r6
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	461d      	mov	r5, r3
 80034ea:	f04f 0600 	mov.w	r6, #0
 80034ee:	196b      	adds	r3, r5, r5
 80034f0:	eb46 0406 	adc.w	r4, r6, r6
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	f7fc fe6e 	bl	80001d8 <__aeabi_uldivmod>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	461a      	mov	r2, r3
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <UART_SetConfig+0x384>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a86      	ldr	r2, [pc, #536]	; (8003730 <UART_SetConfig+0x384>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003524:	4498      	add	r8, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	461d      	mov	r5, r3
 800352a:	f04f 0600 	mov.w	r6, #0
 800352e:	46a9      	mov	r9, r5
 8003530:	46b2      	mov	sl, r6
 8003532:	eb19 0309 	adds.w	r3, r9, r9
 8003536:	eb4a 040a 	adc.w	r4, sl, sl
 800353a:	4699      	mov	r9, r3
 800353c:	46a2      	mov	sl, r4
 800353e:	eb19 0905 	adds.w	r9, r9, r5
 8003542:	eb4a 0a06 	adc.w	sl, sl, r6
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800355a:	4689      	mov	r9, r1
 800355c:	4692      	mov	sl, r2
 800355e:	eb19 0005 	adds.w	r0, r9, r5
 8003562:	eb4a 0106 	adc.w	r1, sl, r6
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	461d      	mov	r5, r3
 800356c:	f04f 0600 	mov.w	r6, #0
 8003570:	196b      	adds	r3, r5, r5
 8003572:	eb46 0406 	adc.w	r4, r6, r6
 8003576:	461a      	mov	r2, r3
 8003578:	4623      	mov	r3, r4
 800357a:	f7fc fe2d 	bl	80001d8 <__aeabi_uldivmod>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	461a      	mov	r2, r3
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <UART_SetConfig+0x384>)
 8003586:	fba3 1302 	umull	r1, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <UART_SetConfig+0x384>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 0207 	and.w	r2, r3, #7
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4442      	add	r2, r8
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e26f      	b.n	8003a8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ae:	f7fe feef 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80035b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	461d      	mov	r5, r3
 80035b8:	f04f 0600 	mov.w	r6, #0
 80035bc:	46a8      	mov	r8, r5
 80035be:	46b1      	mov	r9, r6
 80035c0:	eb18 0308 	adds.w	r3, r8, r8
 80035c4:	eb49 0409 	adc.w	r4, r9, r9
 80035c8:	4698      	mov	r8, r3
 80035ca:	46a1      	mov	r9, r4
 80035cc:	eb18 0805 	adds.w	r8, r8, r5
 80035d0:	eb49 0906 	adc.w	r9, r9, r6
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035e8:	4688      	mov	r8, r1
 80035ea:	4691      	mov	r9, r2
 80035ec:	eb18 0005 	adds.w	r0, r8, r5
 80035f0:	eb49 0106 	adc.w	r1, r9, r6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	461d      	mov	r5, r3
 80035fa:	f04f 0600 	mov.w	r6, #0
 80035fe:	196b      	adds	r3, r5, r5
 8003600:	eb46 0406 	adc.w	r4, r6, r6
 8003604:	461a      	mov	r2, r3
 8003606:	4623      	mov	r3, r4
 8003608:	f7fc fde6 	bl	80001d8 <__aeabi_uldivmod>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	461a      	mov	r2, r3
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <UART_SetConfig+0x384>)
 8003614:	fba3 2302 	umull	r2, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	461d      	mov	r5, r3
 8003622:	f04f 0600 	mov.w	r6, #0
 8003626:	46a9      	mov	r9, r5
 8003628:	46b2      	mov	sl, r6
 800362a:	eb19 0309 	adds.w	r3, r9, r9
 800362e:	eb4a 040a 	adc.w	r4, sl, sl
 8003632:	4699      	mov	r9, r3
 8003634:	46a2      	mov	sl, r4
 8003636:	eb19 0905 	adds.w	r9, r9, r5
 800363a:	eb4a 0a06 	adc.w	sl, sl, r6
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800364e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003652:	4689      	mov	r9, r1
 8003654:	4692      	mov	sl, r2
 8003656:	eb19 0005 	adds.w	r0, r9, r5
 800365a:	eb4a 0106 	adc.w	r1, sl, r6
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	461d      	mov	r5, r3
 8003664:	f04f 0600 	mov.w	r6, #0
 8003668:	196b      	adds	r3, r5, r5
 800366a:	eb46 0406 	adc.w	r4, r6, r6
 800366e:	461a      	mov	r2, r3
 8003670:	4623      	mov	r3, r4
 8003672:	f7fc fdb1 	bl	80001d8 <__aeabi_uldivmod>
 8003676:	4603      	mov	r3, r0
 8003678:	460c      	mov	r4, r1
 800367a:	461a      	mov	r2, r3
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <UART_SetConfig+0x384>)
 800367e:	fba3 1302 	umull	r1, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2164      	movs	r1, #100	; 0x64
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <UART_SetConfig+0x384>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800369e:	4498      	add	r8, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	461d      	mov	r5, r3
 80036a4:	f04f 0600 	mov.w	r6, #0
 80036a8:	46a9      	mov	r9, r5
 80036aa:	46b2      	mov	sl, r6
 80036ac:	eb19 0309 	adds.w	r3, r9, r9
 80036b0:	eb4a 040a 	adc.w	r4, sl, sl
 80036b4:	4699      	mov	r9, r3
 80036b6:	46a2      	mov	sl, r4
 80036b8:	eb19 0905 	adds.w	r9, r9, r5
 80036bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036d4:	4689      	mov	r9, r1
 80036d6:	4692      	mov	sl, r2
 80036d8:	eb19 0005 	adds.w	r0, r9, r5
 80036dc:	eb4a 0106 	adc.w	r1, sl, r6
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	461d      	mov	r5, r3
 80036e6:	f04f 0600 	mov.w	r6, #0
 80036ea:	196b      	adds	r3, r5, r5
 80036ec:	eb46 0406 	adc.w	r4, r6, r6
 80036f0:	461a      	mov	r2, r3
 80036f2:	4623      	mov	r3, r4
 80036f4:	f7fc fd70 	bl	80001d8 <__aeabi_uldivmod>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <UART_SetConfig+0x384>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	; 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <UART_SetConfig+0x384>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4442      	add	r2, r8
 8003724:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003726:	e1b2      	b.n	8003a8e <UART_SetConfig+0x6e2>
 8003728:	40011000 	.word	0x40011000
 800372c:	40011400 	.word	0x40011400
 8003730:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4ad7      	ldr	r2, [pc, #860]	; (8003a98 <UART_SetConfig+0x6ec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d005      	beq.n	800374a <UART_SetConfig+0x39e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4ad6      	ldr	r2, [pc, #856]	; (8003a9c <UART_SetConfig+0x6f0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 80d1 	bne.w	80038ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800374a:	f7fe fe35 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 800374e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	469a      	mov	sl, r3
 8003754:	f04f 0b00 	mov.w	fp, #0
 8003758:	46d0      	mov	r8, sl
 800375a:	46d9      	mov	r9, fp
 800375c:	eb18 0308 	adds.w	r3, r8, r8
 8003760:	eb49 0409 	adc.w	r4, r9, r9
 8003764:	4698      	mov	r8, r3
 8003766:	46a1      	mov	r9, r4
 8003768:	eb18 080a 	adds.w	r8, r8, sl
 800376c:	eb49 090b 	adc.w	r9, r9, fp
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800377c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003784:	4688      	mov	r8, r1
 8003786:	4691      	mov	r9, r2
 8003788:	eb1a 0508 	adds.w	r5, sl, r8
 800378c:	eb4b 0609 	adc.w	r6, fp, r9
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4619      	mov	r1, r3
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	0094      	lsls	r4, r2, #2
 80037a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037a8:	008b      	lsls	r3, r1, #2
 80037aa:	461a      	mov	r2, r3
 80037ac:	4623      	mov	r3, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	4631      	mov	r1, r6
 80037b2:	f7fc fd11 	bl	80001d8 <__aeabi_uldivmod>
 80037b6:	4603      	mov	r3, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	461a      	mov	r2, r3
 80037bc:	4bb8      	ldr	r3, [pc, #736]	; (8003aa0 <UART_SetConfig+0x6f4>)
 80037be:	fba3 2302 	umull	r2, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	469b      	mov	fp, r3
 80037cc:	f04f 0c00 	mov.w	ip, #0
 80037d0:	46d9      	mov	r9, fp
 80037d2:	46e2      	mov	sl, ip
 80037d4:	eb19 0309 	adds.w	r3, r9, r9
 80037d8:	eb4a 040a 	adc.w	r4, sl, sl
 80037dc:	4699      	mov	r9, r3
 80037de:	46a2      	mov	sl, r4
 80037e0:	eb19 090b 	adds.w	r9, r9, fp
 80037e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037fc:	4689      	mov	r9, r1
 80037fe:	4692      	mov	sl, r2
 8003800:	eb1b 0509 	adds.w	r5, fp, r9
 8003804:	eb4c 060a 	adc.w	r6, ip, sl
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4619      	mov	r1, r3
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f04f 0400 	mov.w	r4, #0
 800381a:	0094      	lsls	r4, r2, #2
 800381c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003820:	008b      	lsls	r3, r1, #2
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	4628      	mov	r0, r5
 8003828:	4631      	mov	r1, r6
 800382a:	f7fc fcd5 	bl	80001d8 <__aeabi_uldivmod>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	461a      	mov	r2, r3
 8003834:	4b9a      	ldr	r3, [pc, #616]	; (8003aa0 <UART_SetConfig+0x6f4>)
 8003836:	fba3 1302 	umull	r1, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2164      	movs	r1, #100	; 0x64
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	3332      	adds	r3, #50	; 0x32
 8003848:	4a95      	ldr	r2, [pc, #596]	; (8003aa0 <UART_SetConfig+0x6f4>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003854:	4498      	add	r8, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	469b      	mov	fp, r3
 800385a:	f04f 0c00 	mov.w	ip, #0
 800385e:	46d9      	mov	r9, fp
 8003860:	46e2      	mov	sl, ip
 8003862:	eb19 0309 	adds.w	r3, r9, r9
 8003866:	eb4a 040a 	adc.w	r4, sl, sl
 800386a:	4699      	mov	r9, r3
 800386c:	46a2      	mov	sl, r4
 800386e:	eb19 090b 	adds.w	r9, r9, fp
 8003872:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003882:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003886:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800388a:	4689      	mov	r9, r1
 800388c:	4692      	mov	sl, r2
 800388e:	eb1b 0509 	adds.w	r5, fp, r9
 8003892:	eb4c 060a 	adc.w	r6, ip, sl
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4619      	mov	r1, r3
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	0094      	lsls	r4, r2, #2
 80038aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038ae:	008b      	lsls	r3, r1, #2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4623      	mov	r3, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	4631      	mov	r1, r6
 80038b8:	f7fc fc8e 	bl	80001d8 <__aeabi_uldivmod>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <UART_SetConfig+0x6f4>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	; 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	3332      	adds	r3, #50	; 0x32
 80038d6:	4a72      	ldr	r2, [pc, #456]	; (8003aa0 <UART_SetConfig+0x6f4>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4442      	add	r2, r8
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	e0d0      	b.n	8003a8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7fe fd50 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80038f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	469a      	mov	sl, r3
 80038f6:	f04f 0b00 	mov.w	fp, #0
 80038fa:	46d0      	mov	r8, sl
 80038fc:	46d9      	mov	r9, fp
 80038fe:	eb18 0308 	adds.w	r3, r8, r8
 8003902:	eb49 0409 	adc.w	r4, r9, r9
 8003906:	4698      	mov	r8, r3
 8003908:	46a1      	mov	r9, r4
 800390a:	eb18 080a 	adds.w	r8, r8, sl
 800390e:	eb49 090b 	adc.w	r9, r9, fp
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800391e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003922:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003926:	4688      	mov	r8, r1
 8003928:	4691      	mov	r9, r2
 800392a:	eb1a 0508 	adds.w	r5, sl, r8
 800392e:	eb4b 0609 	adc.w	r6, fp, r9
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4619      	mov	r1, r3
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	0094      	lsls	r4, r2, #2
 8003946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800394a:	008b      	lsls	r3, r1, #2
 800394c:	461a      	mov	r2, r3
 800394e:	4623      	mov	r3, r4
 8003950:	4628      	mov	r0, r5
 8003952:	4631      	mov	r1, r6
 8003954:	f7fc fc40 	bl	80001d8 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	461a      	mov	r2, r3
 800395e:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <UART_SetConfig+0x6f4>)
 8003960:	fba3 2302 	umull	r2, r3, r3, r2
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	469b      	mov	fp, r3
 800396e:	f04f 0c00 	mov.w	ip, #0
 8003972:	46d9      	mov	r9, fp
 8003974:	46e2      	mov	sl, ip
 8003976:	eb19 0309 	adds.w	r3, r9, r9
 800397a:	eb4a 040a 	adc.w	r4, sl, sl
 800397e:	4699      	mov	r9, r3
 8003980:	46a2      	mov	sl, r4
 8003982:	eb19 090b 	adds.w	r9, r9, fp
 8003986:	eb4a 0a0c 	adc.w	sl, sl, ip
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800399e:	4689      	mov	r9, r1
 80039a0:	4692      	mov	sl, r2
 80039a2:	eb1b 0509 	adds.w	r5, fp, r9
 80039a6:	eb4c 060a 	adc.w	r6, ip, sl
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	0094      	lsls	r4, r2, #2
 80039be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039c2:	008b      	lsls	r3, r1, #2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	4631      	mov	r1, r6
 80039cc:	f7fc fc04 	bl	80001d8 <__aeabi_uldivmod>
 80039d0:	4603      	mov	r3, r0
 80039d2:	460c      	mov	r4, r1
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <UART_SetConfig+0x6f4>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	; 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	3332      	adds	r3, #50	; 0x32
 80039ea:	4a2d      	ldr	r2, [pc, #180]	; (8003aa0 <UART_SetConfig+0x6f4>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f6:	4498      	add	r8, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	469b      	mov	fp, r3
 80039fc:	f04f 0c00 	mov.w	ip, #0
 8003a00:	46d9      	mov	r9, fp
 8003a02:	46e2      	mov	sl, ip
 8003a04:	eb19 0309 	adds.w	r3, r9, r9
 8003a08:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	46a2      	mov	sl, r4
 8003a10:	eb19 090b 	adds.w	r9, r9, fp
 8003a14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2c:	4689      	mov	r9, r1
 8003a2e:	4692      	mov	sl, r2
 8003a30:	eb1b 0509 	adds.w	r5, fp, r9
 8003a34:	eb4c 060a 	adc.w	r6, ip, sl
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0094      	lsls	r4, r2, #2
 8003a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a50:	008b      	lsls	r3, r1, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	4631      	mov	r1, r6
 8003a5a:	f7fc fbbd 	bl	80001d8 <__aeabi_uldivmod>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <UART_SetConfig+0x6f4>)
 8003a66:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2164      	movs	r1, #100	; 0x64
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	; 0x32
 8003a78:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <UART_SetConfig+0x6f4>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4442      	add	r2, r8
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	e7ff      	b.n	8003a8e <UART_SetConfig+0x6e2>
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	40011400 	.word	0x40011400
 8003aa0:	51eb851f 	.word	0x51eb851f

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0d      	ldr	r6, [pc, #52]	; (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1ba4      	subs	r4, r4, r6
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2500      	movs	r5, #0
 8003ab0:	42a5      	cmp	r5, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4e0b      	ldr	r6, [pc, #44]	; (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	; (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 f820 	bl	8003afc <_init>
 8003abc:	1ba4      	subs	r4, r4, r6
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	42a5      	cmp	r5, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003acc:	4798      	blx	r3
 8003ace:	3501      	adds	r5, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad6:	4798      	blx	r3
 8003ad8:	3501      	adds	r5, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b3c 	.word	0x08003b3c
 8003ae0:	08003b3c 	.word	0x08003b3c
 8003ae4:	08003b3c 	.word	0x08003b3c
 8003ae8:	08003b40 	.word	0x08003b40

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
